{"version":3,"sources":["App.tsx","index.tsx"],"names":["NETWORK","clusterApiUrl","App","provider","window","solana","isPhantom","open","getProvider","useState","logs","setLogs","addLog","log","connection","Connection","setConnected","useEffect","on","publicKey","toBase58","connect","onlyIfTrusted","catch","disconnect","createTransferTransaction","a","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","feePayer","anyTransaction","getRecentBlockhash","recentBlockhash","blockhash","sendTransaction","signTransaction","signed","sendRawTransaction","serialize","signature","confirmTransaction","console","warn","JSON","stringify","signMultipleTransactions","onlyFirst","Promise","all","transaction1","transaction2","signAllTransactions","signMessage","message","data","TextEncoder","encode","className","isConnected","onClick","res","map","i","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.49ed9f35.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport \"./styles.css\";\n\ntype DisplayEncoding = \"utf8\" | \"hex\";\ntype PhantomEvent = \"disconnect\" | \"connect\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\ninterface PhantomProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<any>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\nconst getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    const anyWindow: any = window;\n    const provider = anyWindow.solana;\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n  window.open(\"https://phantom.app/\", \"_blank\");\n};\n\nconst NETWORK = clusterApiUrl(\"mainnet-beta\");\n\nexport default function App() {\n  const provider = getProvider();\n  const [logs, setLogs] = useState<string[]>([]);\n  const addLog = (log: string) => setLogs([...logs, log]);\n  const connection = new Connection(NETWORK);\n  const [, setConnected] = useState<boolean>(false);\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", () => {\n        setConnected(true);\n        addLog(\"Connected to wallet \" + provider.publicKey?.toBase58());\n      });\n      provider.on(\"disconnect\", () => {\n        setConnected(false);\n        addLog(\"Disconnected from wallet\");\n      });\n      // try to eagerly connect\n      provider.connect({ onlyIfTrusted: true }).catch(() => {\n        // fail silently\n      });\n      return () => {\n        provider.disconnect();\n      };\n    }\n  }, [provider]);\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const createTransferTransaction = async () => {\n    if (!provider.publicKey) {\n      return;\n    }\n    let transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: provider.publicKey,\n        lamports: 100,\n      })\n    );\n    transaction.feePayer = provider.publicKey;\n    addLog(\"Getting recent blockhash\");\n    const anyTransaction: any = transaction;\n    anyTransaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n    return transaction;\n  };\n\n  const sendTransaction = async () => {\n    const transaction = await createTransferTransaction();\n    if (transaction) {\n      try {\n        let signed = await provider.signTransaction(transaction);\n        addLog(\"Got signature, submitting transaction\");\n        let signature = await connection.sendRawTransaction(signed.serialize());\n        addLog(\n          \"Submitted transaction \" + signature + \", awaiting confirmation\"\n        );\n        await connection.confirmTransaction(signature);\n        addLog(\"Transaction \" + signature + \" confirmed\");\n      } catch (err) {\n        console.warn(err);\n        addLog(\"Error: \" + JSON.stringify(err));\n      }\n    }\n  };\n  const signMultipleTransactions = async (onlyFirst: boolean = false) => {\n    const [transaction1, transaction2] = await Promise.all([\n      createTransferTransaction(),\n      createTransferTransaction(),\n    ]);\n    if (transaction1 && transaction2) {\n      let signature;\n      try {\n        if (onlyFirst) {\n          signature = await provider.signAllTransactions([transaction1]);\n        } else {\n          signature = await provider.signAllTransactions([\n            transaction1,\n            transaction2,\n          ]);\n        }\n      } catch (err) {\n        console.warn(err);\n        addLog(\"Error: \" + JSON.stringify(err));\n      }\n      addLog(\"Signature \" + signature);\n    }\n  };\n  const signMessage = async (message: string) => {\n    const data = new TextEncoder().encode(message);\n    try {\n      await provider.signMessage(data);\n    } catch (err) {\n      console.warn(err);\n      addLog(\"Error: \" + JSON.stringify(err));\n    }\n    addLog(\"Message signed\");\n  };\n  return (\n    <div className=\"App\">\n      <h1>Phantom Sandbox</h1>\n      <main>\n        {provider && provider.publicKey ? (\n          <>\n            <div>Wallet address: {provider.publicKey?.toBase58()}.</div>\n            <div>isConnected: {provider.isConnected ? \"true\" : \"false\"}.</div>\n            <button onClick={sendTransaction}>Send Transaction</button>\n            <button onClick={() => signMultipleTransactions(false)}>\n              Sign All Transactions (multiple){\" \"}\n            </button>\n            <button onClick={() => signMultipleTransactions(true)}>\n              Sign All Transactions (single){\" \"}\n            </button>\n            <button\n              onClick={() =>\n                signMessage(\n                  \"To avoid digital dognappers, sign below to authenticate with CryptoCorgis.\"\n                )\n              }\n            >\n              Sign Message\n            </button>\n            <button\n              onClick={async () => {\n                try {\n                  const res = await provider.disconnect();\n                  addLog(JSON.stringify(res));\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"Error: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Disconnect\n            </button>\n          </>\n        ) : (\n          <>\n            <button\n              onClick={async () => {\n                try {\n                  const res = await provider.connect();\n                  addLog(JSON.stringify(res));\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"Error: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Connect to Phantom\n            </button>\n          </>\n        )}\n        <hr />\n        <div className=\"logs\">\n          {logs.map((log, i) => (\n            <div className=\"log\" key={i}>\n              {log}\n            </div>\n          ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}